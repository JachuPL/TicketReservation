// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketReservation.Application.Common.Database;

namespace TicketReservation.Application.Migrations
{
    [DbContext(typeof(TicketReservationContext))]
    [Migration("20190628211801_identity_fix")]
    partial class identity_fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketReservation.Domain.Cinema", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Cinemas");
                });

            modelBuilder.Entity("TicketReservation.Domain.CinemaMovie", b =>
                {
                    b.Property<Guid>("CinemaId");

                    b.Property<Guid>("MovieId");

                    b.HasKey("CinemaId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("CinemaMovies");
                });

            modelBuilder.Entity("TicketReservation.Domain.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("TicketReservation.Domain.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ShowId");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(100);

                    b.Property<string>("UserFirstName")
                        .HasMaxLength(100);

                    b.Property<string>("UserLastName")
                        .HasMaxLength(100);

                    b.Property<string>("UserPhone")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("ShowId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("TicketReservation.Domain.ReservedSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Column");

                    b.Property<bool>("IsPaid");

                    b.Property<Guid?>("ReservationId");

                    b.Property<int>("Row");

                    b.Property<int>("Ticket");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservedSeats");
                });

            modelBuilder.Entity("TicketReservation.Domain.Show", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CinemaId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MovieId");

                    b.Property<string>("PriceList");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.HasIndex("MovieId");

                    b.ToTable("Shows");
                });

            modelBuilder.Entity("TicketReservation.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6feffd38-8779-4029-bc53-7b0dba014a08"),
                            Login = "admin",
                            PasswordHash = "RBwia7l/XT55UPAXwcG8EeaD9Ptxwlqc1iHXKC9Ud62XEoKVlF+A6w==",
                            PasswordSalt = "xKE27N+FJPrxbDch8p0E/MOMTd1ueLi9u74Z4sbM+JyGThQileDifA==",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("2449b5e1-f6bd-40bb-9c38-eb22c5431839"),
                            Login = "cashier",
                            PasswordHash = "u604IwZO4CqYWZN3F/6BCh3e9xji1O2P57xKrYQHLNnRsv+Y/BPeCQ==",
                            PasswordSalt = "Dqd/i1QlsgMR2UV9vz0dA/LBiul4s+1eHXL2uMhKa6uszDhY9+80Tg==",
                            Role = 0
                        },
                        new
                        {
                            Id = new Guid("b4230381-cbb4-4509-ab44-5e148cde3e43"),
                            Login = "user",
                            PasswordHash = "8Wp1FTPfFuV9y3WwbEQAM6WWxrQ27zdMF2ok8ROE1tcIMrBKhCd2sg==",
                            PasswordSalt = "LwDSAG2EZmhphdnyxKnFUnl0ixvZCjvKwpusqfvmXDaIAkLQmad60A==",
                            Role = 0
                        });
                });

            modelBuilder.Entity("TicketReservation.Domain.CinemaMovie", b =>
                {
                    b.HasOne("TicketReservation.Domain.Cinema", "Cinema")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketReservation.Domain.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketReservation.Domain.Reservation", b =>
                {
                    b.HasOne("TicketReservation.Domain.Show")
                        .WithMany("Reservations")
                        .HasForeignKey("ShowId");
                });

            modelBuilder.Entity("TicketReservation.Domain.ReservedSeat", b =>
                {
                    b.HasOne("TicketReservation.Domain.Reservation")
                        .WithMany("ReservedSeats")
                        .HasForeignKey("ReservationId");
                });

            modelBuilder.Entity("TicketReservation.Domain.Show", b =>
                {
                    b.HasOne("TicketReservation.Domain.Cinema", "Cinema")
                        .WithMany()
                        .HasForeignKey("CinemaId");

                    b.HasOne("TicketReservation.Domain.Movie", "Movie")
                        .WithMany("Shows")
                        .HasForeignKey("MovieId");
                });
#pragma warning restore 612, 618
        }
    }
}
